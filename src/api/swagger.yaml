swagger: '2.0'
info:
  title: Kort API
  version: "1.0"
consumes:
  - application/json
produces:
  - application/json
basePath: /v1.0

paths:

  /users/{user_id}:
    get:
      tags: [User]
      operationId: api.users.get_user
      summary: get user information
      parameters:
        - $ref: '#/parameters/user_id'
          required: true
        - name: Authorization
          in: header
          description: the user secret given after succesful OAuth login
          required: true
          type: string
      responses:
        200:
          description: return user
          schema:
            $ref: '#/definitions/User'
        400:
          description: bad request
        401:
          description: unauthorized
        404:
          description: user does not exist
        500:
          description: internal server error

  /missions:
    get:
      tags: [Mission]
      operationId: api.missions.get_missions
      summary: returns all missions within the parameters given
      parameters:
        - name: user_id
          in: query
          default: -1
          description: unique user id
          type: string
          required: false
        - name: lat
          in: query
          type: number
          required: true
        - name: lon
          in: query
          type: number
          required: true
        - name: radius
          in: query
          type: integer
          required: true
        - name: limit
          in: query
          type: integer
          minimum: 0
          default: 100
        - name: lang
          in: query
          type: string
          default: 'en'
      responses:
        200:
          description: Returns missions
          schema:
            type: array
            items:
              $ref: '#/definitions/Mission'
        400:
          description: bad request
        500:
          description: internal server error
  /missions/{schema_id}/{error_id}/solution:
    post:
      tags: [Mission]
      operationId: api.missions.put_mission_solution
      summary: submit solution to missions
      parameters:
        - $ref: '#/parameters/schema_id'
        - $ref: '#/parameters/error_id'
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/missionSolution'
      responses:
        200:
          description: submit a mission solution
      responses:
        200:
          description: returns newly aquired achievements
          schema:
            type: array
            items:
              $ref: '#/definitions/Achievement'
        400:
          description: bad request
        404:
          description: an error occured
        500:
          description: internal server error
  /missions/osm/{osm_type}/{osm_id}:
    get:
      tags: [Mission]
      operationId: api.missions.get_osm_geom
      summary: returns the geometry of the osm feature
      parameters:
        - $ref: '#/parameters/osm_type'
        - $ref: '#/parameters/osm_id'
      responses:
        200:
          description: returns list of coordinates
        400:
          description: bad request
        500:
          description: internal server error

  /highscore:
    get:
      tags: [Highscore]
      operationId: api.highscores.get_highscore
      summary: returns the current highscore
      parameters:
        - name: type
          in: query
          type: string
          enum:
            - day
            - week
            - month
            - all
          default: all
        - name: limit
          in: query
          type: integer
          minimum: 1
          maximum: 100
          default: 10
      responses:
        200:
          description: returns the highscore
          schema:
            type: array
            items:
              $ref: '#/definitions/Highscore'
        400:
          description: bad request
        500:
          description: internal server error

  /achievements:
    get:
      tags: [Achievements]
      operationId: api.achievements.get_achievements
      summary: returns the achievements
      parameters:
        - name: user_id
          description: unique user id
          type: string
          in: query
          default: -1
        - name: lang
          in: query
          type: string
          default: 'en'
      responses:
        200:
          description: returns newly aquired achievements if any
          schema:
            type: array
            items:
              $ref: '#/definitions/Achievement'
        400:
          description: bad request
        500:
          description: internal server error

  /statistics:
    get:
      tags: [Statistics]
      operationId: api.statistics.get_statistics
      summary: returns the statistics
      responses:
        200:
          description: return the current statistics
          schema:
            $ref: '#/definitions/Statistics'
        500:
          description: internal server error

parameters:
  user_id:
    name: user_id
    description: unique user id
    in: path
    type: integer
  schema_id:
    name: schema_id
    description: schema id
    in: path
    type: string
    required: true
    pattern: "^[0-9]+$"
  error_id:
    name: error_id
    description: error id
    in: path
    type: integer
    required: true
  osm_type:
    name: osm_type
    description: the osm type (node, way, relation)
    in: path
    type: string
    enum:
      - node
      - way
      - relation
  osm_id:
    name: osm_id
    description: the osm id
    in: path
    type: integer


definitions:
  User:
    type: object
    required:
      - name
      - username
      - mission_count
      - mission_count_today
      - koin_count
      - oauth_provider
      - oauth_user_id
      - pic_url
      - secret
      - token
      - logged_in
      - last_login
    properties:
      id:
        type: integer
        description: unique identifier
        example: 12
        readOnly: true
      name:
        type: string
        description: user's full name
        example: "user's name"
        minLength: 1
        maxLength: 100
      username:
        type: string
        description: the username used
        example: "username"
        minLength: 1
        maxLength: 100
      email:
        type: string
        description: the user's email if any
        example: "user@kort.ch"
        minLength: 1
        maxLength: 100
      mission_count:
        type: integer
        description: how many mission the user has finished
        example: 2
      mission_count_today:
        type: integer
        description: how many mission the user has finished today
        example: 2
      koin_count:
        type: integer
        description: how many koins the user has obtained
        example: 825
      oauth_provider:
        type: string
        description: oauth provider
        example: "google"
      oauth_user_id:
        type: string
        description: oauth user id
        example: "htksduwe23js"
      pic_url:
        type: string
        description: url to avatar picture
        example: "www.gravatar.com/avatar/secret?s=200&d=mm&r=r"
      secret:
        type: string
        description: url to avatar picture
        example: "asdojasdkjas"
      token:
        type: string
        description: token from oauth
        example: "FAF923jdsdDOaOs"
      logged_in:
        type: boolean
        description: whether the user is logged in
        example: true
      last_login:
        type: string
        format: date-time
        description: Creation time
        example: "2015-07-07T15:49:51.230+02:00"
        readOnly: true

  Mission:
    type: object
    properties:
      id:
        type: string
        description: id
        example: 12
        readOnly: true
      osmId:
        type: number
        description: "The unique OSM id"
      osmType:
        type: string
      type:
        type: string
        description: mission type
        example: "mission_building_floors"
      title:
        type: string
        description: mission title for display
        example: "Missing Building Floors"
      question:
        type: string
        description: question
        example: "How many floors has this building?"
      geomType:
        type: string
        description: geometry type
        example: "point"
      annotationCoordinate:
        type: array
        items:
          type: number
        description: lat/lon array of annotation
        example: [46.817812, 9.852413]
      coordinates:
        type: array
        items:
          type: number
        description: lat/lon array of geometry
        example: [46.817812, 9.852413]
      koinReward:
        type: integer
        description: number of koins as reward
        example: 5
      koinRewardWhenComplete:
        type: integer
        description: number of koins when other answers are the same
        example: 10
      image:
        type: string
        description: the image file for the annotation either as URL or local filename in app
        example: "mission_floors"
      inputType:
        type: object
        properties:
          name:
            type: string
            description: name of the input type (number|select|text)
            example: "number"
          options:
            type: array
            items:
              type: string
            description: the selection to choose from
            example: [ "Italian", "Chinese", "Italian", "Swiss", "Thai" ]
          values:
            type: array
            items:
              type: string
            description: the corresponding values of each selection
            example: [ "type1", "type2", "type3", "type4", "type5" ]
          constraints:
            type: object
            properties:
              description:
                type: string
                description: the localized message that is shown to the user if validation fails
                example: "Number must be between 1 and 100"
              re:
                type: string
                description: the regular expression in place

  missionSolution:
    type: object
    properties:
      solution:
        $ref: '#/definitions/Solution'

  Solution:
    type: object
    properties:
      value:
        type: string
        description: the answer value
      option:
        type: string
        description: the option value if any
      koins:
        type: integer
        description: number of koins earned
      solved:
        type: boolean
        description: whether the mission was solved or not
      userId:
        type: integer
        description: unique user id
      osm_id:
        type: integer
        description: the unique osm id
      lang:
        type: string
        default: 'en'

  Achievement:
    type: object
    properties:
      achievementId:
        type: integer
        description: achievement id
      achievementTitle:
        type: string
        description: achievement title
      achievementDescription:
        type: string
        description: achievement description
      achievementImageURI:
        type: string
        description: uri for the badge icon
      achieved:
        type: boolean
        description: whether or not the achievement has been achieved
      achievementDate:
        type: string
        format: date-time
        description: the date on which the achievement has been achieved

  Highscore:
    type: object
    properties:
      id:
        type: integer
        description: id
      rank:
        type: integer
        description: the rank for this user
      user_id:
        type: string
        description: the id of this user
      username:
        type: string
        description: the username
      mission_count:
        type: integer
        description: how many missions this user has solved
      koin_count:
        type: integer
        description: how many koins this user has earned

  Statistics:
    type: object
    properties:
      id:
        type: integer
        description: id
      fix_count:
        type: integer
        description: the number of solved missions (includes unsolved missions)
      complete_fix_count:
        type: integer
        description: the number of solved missions which have been completed with the help of other answers and are ready to be submitted to OSM
      incomplete_fix_count:
        type: integer
        description: the number of missions which have not yet been completed with the help of other answers
      validated_fix_count:
        type: integer
        description: the number of solved missions
      user_count:
        type: integer
        description: self-explanatory
      osm_user_count:
        type: integer
        description: self-explanatory
      google_user_count:
        type: integer
        description: self-explanatory
      fb_user_count:
        type: integer
        description: self-explanatory
      badge_count:
        type: integer
        description: the total number of achievements which have been obtained
      solved_motorway_ref_count:
        type: integer
        description: self-explanatory
      solved_religion_count:
        type: integer
        description: self-explanatory
      solved_poi_name_count:
        type: integer
        description: self-explanatory
      solved_missing_maxspeed_count:
        type: integer
        description: self-explanatory
      solved_language_unknown_count:
        type: integer
        description: self-explanatory
      solved_missing_track_type_count:
        type: integer
        description: self-explanatory
      solved_way_wo_tags_count:
        type: integer
        description: self-explanatory
      solved_missing_cuisine_count:
        type: integer
        description: self-explanatory
      solved_opening_hours_count:
        type: integer
        description: self-explanatory
      solved_missing_level_count:
        type: integer
        description: self-explanatory
      highscore_place_1_count:
        type: integer
        description: self-explanatory
      highscore_place_2_count:
        type: integer
        description: self-explanatory
      highscore_place_3_count:
        type: integer
        description: self-explanatory
      total_fix_count_100_count:
        type: integer
        description: self-explanatory
      total_fix_count_50_count:
        type: integer
        description: self-explanatory
      total_fix_count_10_count:
        type: integer
        description: self-explanatory
      total_fix_count_1_count:
        type: integer
        description: self-explanatory
      fix_count_motorway_ref_100_count:
        type: integer
        description: self-explanatory
      fix_count_motorway_ref_50_count:
        type: integer
        description: self-explanatory
      fix_count_motorway_ref_5_count:
        type: integer
        description: self-explanatory
      fix_count_religion_100_count:
        type: integer
        description: self-explanatory
      fix_count_religion_50_count:
        type: integer
        description: self-explanatory
      fix_count_religion_5_count:
        type: integer
        description: self-explanatory
      fix_count_poi_name_100_count:
        type: integer
        description: self-explanatory
      fix_count_poi_name_50_count:
        type: integer
        description: self-explanatory
      fix_count_poi_name_5_count:
        type: integer
        description: self-explanatory
      fix_count_missing_maxspeed_100_count:
        type: integer
        description: self-explanatory
      fix_count_missing_maxspeed_50_count:
        type: integer
        description: self-explanatory
      fix_count_missing_maxspeed_5_count:
        type: integer
        description: self-explanatory
      fix_count_language_unknown_100_count:
        type: integer
        description: self-explanatory
      fix_count_language_unknown_50_count:
        type: integer
        description: self-explanatory
      fix_count_language_unknown_5_count:
        type: integer
        description: self-explanatory
      fix_count_missing_track_type_100_count:
        type: integer
        description: self-explanatory
      fix_count_missing_track_type_50_count:
        type: integer
        description: self-explanatory
      fix_count_missing_track_type_5_count:
        type: integer
        description: self-explanatory
      fix_count_way_wo_tags_100_count:
        type: integer
        description: self-explanatory
      fix_count_way_wo_tags_50_count:
        type: integer
        description: self-explanatory
      fix_count_way_wo_tags_5_count:
        type: integer
        description: self-explanatory
      fix_count_missing_cuisine_100_count:
        type: integer
        description: self-explanatory
      fix_count_missing_cuisine_50_count:
        type: integer
        description: self-explanatory
      fix_count_missing_cuisine_5_count:
        type: integer
        description: self-explanatory
      fix_count_missing_level_100_count:
        type: integer
        description: self-explanatory
      fix_count_missing_level_50_count:
        type: integer
        description: self-explanatory
      fix_count_missing_level_5_count:
        type: integer
        description: self-explanatory
      fix_count_opening_hours_100_count:
        type: integer
        description: self-explanatory
      fix_count_opening_hours_50_count:
        type: integer
        description: self-explanatory
      fix_count_opening_hours_5_count:
        type: integer
        description: self-explanatory
      six_per_day_count:
        type: integer
        description: self-explanatory