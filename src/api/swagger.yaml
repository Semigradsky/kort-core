swagger: '2.0'
info:
  title: Kort API
  version: "0.1"
consumes:
  - application/json
produces:
  - application/json
basePath: /v0.1

paths:

  /users:
    get:
      tags: [User]
      operationId: api.users.get_users
      summary: User Login
      parameters:
        - name: name
          in: query
          type: string
          pattern: "^[a-zA-Z0-9]*$"
        - name: limit
          in: query
          type: integer
          minimum: 0
          default: 100
      responses:
        200:
          description: Returns user
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      security:
        # enable authentication and require the "uid" scope for this endpoint
        - oauth2: ['uid']
  /users/{user_id}:
    get:
      tags: [User]
      operationId: api.users.get_user
      summary: Get a single user
      parameters:
        - $ref: '#/parameters/user_id'
      responses:
        200:
          description: Return User
          schema:
            $ref: '#/definitions/User'
        404:
          description: User does not exist
    put:
      tags: [User]
      operationId: api.users.put_user
      summary: Create or update a user
      parameters:
        - $ref: '#/parameters/user_id'
        - name: user
          in: body
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: User updated
        201:
          description: New user created
    delete:
      tags: [User]
      operationId: api.users.delete_user
      summary: Remove a user
      parameters:
        - $ref: '#/parameters/user_id'
      responses:
        204:
          description: User was deleted
        404:
          description: User does not exist

  /answers:
    get:
      tags: [Answer]
      operationId: api.answers.get_answer
      summary: Answer types
      parameters:
        - name: type
          in: query
          type: string
      responses:
        200:
          description: returns possible answers

  /missions:
    get:
      tags: [Mission]
      operationId: api.missions.get_missions
      summary: returns all missions within the parameters given
      parameters:
        - name: lat
          in: query
          type: number
          required: true
        - name: lon
          in: query
          type: number
          required: true
        - name: radius
          in: query
          type: integer
          required: true
        - name: limit
          in: query
          type: integer
          minimum: 0
          default: 100
        - name: lang
          in: query
          type: string
          default: 'en'
      responses:
        200:
          description: Returns missions
          schema:
            type: array
            items:
              $ref: '#/definitions/Mission'
  /missions/{mission_id}:
    get:
      tags: [Mission]
      operationId: api.missions.get_mission
      summary: mission description
      parameters:
        - $ref: '#/parameters/mission_id'
      responses:
        200:
          description: returns mission with given id

  /highscore:
    get:
      tags: [Highscore]
      operationId: api.highscores.get_highscore
      summary: returns the current highscore
      parameters:
        - name: type
          in: query
          type: string
          default: 'day'
        - name: limit
          in: query
          type: integer
          minimum: 1
          default: 10
      responses:
        200:
          description: Returns highscore
          schema:
            type: array
            items:
              $ref: '#/definitions/Mission'

  /achievements:
    get:
      tags: [Achievements]
      operationId: api.achievements.get_achievements
      summary: returns the achievements
      responses:
        200:
          description: Returns achievements


parameters:
  user_id:
    name: user_id
    description: unique user id
    in: path
    type: string
    required: true
    pattern: "^[a-zA-Z0-9-]+$"
  mission_id:
    name: mission_id
    description: unique mission id
    in: path
    type: string
    required: true
    pattern: "^[a-zA-Z0-9-]+$"

definitions:
  User:
    type: object
    required:
      - name
      - username
      - mission_count
      - mission_count_today
      - koin_count
      - oauth_provider
      - oauth_user_id
      - pic_url
      - secret
      - token
      - logged_in
      - last_login
    properties:
      id:
        type: integer
        description: Unique identifier
        example: 12
        readOnly: true
      name:
        type: string
        description: User's full name
        example: "user"
        minLength: 1
        maxLength: 100
      username:
        type: string
        description: User's full name
        example: "user"
        minLength: 1
        maxLength: 100
      mission_count:
        type: integer
        description: how many mission the user has finished
        example: 2
      mission_count_today:
        type: integer
        description: how many mission the user has finished today
        example: 2
      koin_count:
        type: integer
        description: how many koins the user has
      oauth_provider:
        type: string
        description: oauth provider
        example: "google"
      oauth_user_id:
        type: string
        description: oauth user id
        example: "none"
      pic_url:
        type: string
        description: url to avatar picture
        example: "www.gravatar.com/avatar/secret?s=200&d=mm&r=r"
      secret:
        type: string
        description: url to avatar picture
        example: "asdojasdkjas"
      token:
        type: string
        description: token from oauth
        example: "kuqwelkjh"
      logged_in:
        type: boolean
        description: whether the user is logged in
        example: true
      last_login:
        type: string
        format: date-time
        description: Creation time
        example: "2015-07-07T15:49:51.230+02:00"
        readOnly: true

  Mission:
    type: object
    properties:
      id:
        type: integer
        description: id
        example: 12
        readOnly: true
      name:
        type: string
        description: mission description
        example: "mission xyz"
        minLength: 1
        maxLength: 100




securityDefinitions:
  oauth2:
    type: oauth2
    flow: implicit
    authorizationUrl: http://localhost:5000/login
    scopes:
      uid: Unique identifier of the user accessing the service.